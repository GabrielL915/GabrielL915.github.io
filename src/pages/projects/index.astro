---
import { themeConfig } from '~/.config'
import LayoutDefault from '~/layouts/LayoutDefault.astro'
import { getProjectCategories, getPathFromCategory } from '~/utils/index'

const { translate: t } = Astro.locals
const categoryMap = await getProjectCategories()

interface ProjectItem {
  slug: string
  data: {
    title: string,
    categories: string[]
  }
}

interface CategoryListItem {
  title: string
  href: string
  projects: ProjectItem[]
  size: string
}

const allProjects: ProjectItem[] = Array.from(categoryMap.values())
  .flat() // Combina os projetos de todas as categorias
  .reduce((unique, project) => {
    // Remove duplicados com base no slug
    if (!unique.some((item) => item.slug === project.slug)) {
      unique.push(project);
    }
    return unique;
  }, [] as ProjectItem[]) // Inicializa como uma lista vazia
  .sort((a, b) => a.data.title.localeCompare(b.data.title));
---
<LayoutDefault>
  <section class="project-category-section">
    <h2 class="category-title">{t('Project List')}</h2>
    <ul class="category-list pl-6" flex="~ col gap-4">
      {
        allProjects.map(({ slug, data }) => (
          <li class="category-item">
            <h3 class="category-name">
              <a href={`${slug}/`} class="hover:text-primary transition-all">
                # {data.title}
              </a>
            </h3>
            <p class="project-sublist">
              {data.categories.join(", ")} {/* Exibe categorias ou tecnologias associadas */}
            </p>
          </li>
        ))
      }
    </ul>
  </section>
</LayoutDefault>

<style>
  .project-category-section {
    padding: 2rem;
    background-color: var(--color-background-alt);
    border-radius: 8px;
  }

  .category-title {
    font-size: 2rem;
    margin-bottom: 1rem;
  }

  .category-item {
    margin-bottom: 1.5rem;
  }

  .category-name a {
    font-size: 1.5rem;
    color: var(--color-primary);
  }

  .project-sublist {
    margin-top: 0.5rem;
    margin-left: 1rem;
    list-style-type: none;
  }
</style>
